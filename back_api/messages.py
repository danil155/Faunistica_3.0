import httpx

from config.config import BOT_TOKEN, ADMIN_CHAT_ID


async def send_support_message(data, user_id) -> None:
    message = (
        f"üì¢ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã üì¢\n"
        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram: {data.link}\n"
        f"üë§ Username –≤ –±–æ—Ç–µ: {data.user_name if data.user_name else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"ü™™ ID: {user_id if user_id != -1 else '–ù–µ –Ω–∞–π–¥–µ–Ω'}\n"
        f"üìã –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {get_issue_type(data.issue_type)}\n"
        f"\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n"
        f"{data.text}\n"
    )

    message_payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }

    async with httpx.AsyncClient() as client:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        response = await client.post(url, json=message_payload)
        response.raise_for_status()


def get_issue_type(issue_type):
    issue_types = {
        "authorisation-website": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–∞ —Å–∞–π—Ç–µ",
        "authorisation-tg": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ –±–æ—Ç–µ",
        "registration": "–ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –±–æ—Ç–µ",
        "get-publication": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—å–∏",
        "autofill": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
        "fill-by-hand": "–ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Ä—É—á–Ω—É—é",
        "confirmation": "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã",
        "other": "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    }
    return issue_types.get(issue_type, issue_type)
